test

 438                 { NFS_MOUNT_SOFT, ",soft", "" },
 439                 { NFS_MOUNT_SOFTERR, ",softerr", "" },

server->client->cl_softerr = 1;
server->client->cl_softrtry = 1;

task->tk_flags |= RPC_TASK_SOFT;
task->tk_flags |= RPC_TASK_TIMEOUT;

#define RPC_IS_SOFT(t)          ((t)->tk_flags & (RPC_TASK_SOFT|RPC_TASK_TIMEOUT))
 
rpc_check_timeout
 __rpc_call_rpcerror // RPC_IS_SOFT
  rpc_exit // 退出 rpc_task，根据是否有RPC_TASK_TIMEOUT决定返回ETIMEOUT还是EIO

以call_bind_status为例
call_bind_status
 task->tk_action = call_bind
 // 出现timeout后调用
 rpc_check_timeout
  // 如果有 RPC_IS_SOFT 则直接退出
  // 如果没有 RPC_IS_SOFT 则继续 call_bind --> call_bind_status 的循环

--- a/fs/nfs_common/grace.c
+++ b/fs/nfs_common/grace.c
@@ -31,9 +31,10 @@ locks_start_grace(struct net *net, struct lock_manager *lm)
        struct list_head *grace_list = net_generic(net, grace_net_id);

        spin_lock(&grace_lock);
-       if (list_empty(&lm->list))
+       if (list_empty(&lm->list)) {
+               printk("%s add lm %px to grace_list\n", __func__, lm);
                list_add(&lm->list, grace_list);
-       else
+       } else
                WARN(1, "double list_add attempt detected in net %x %s\n",
                     net->ns.inum, (net == &init_net) ? "(init_net)" : "");
        spin_unlock(&grace_lock);
@@ -55,6 +56,7 @@ void
 locks_end_grace(struct lock_manager *lm)
 {
        spin_lock(&grace_lock);
+       printk("%s remove lm %px to grace_list\n", __func__, lm);
        list_del_init(&lm->list);
        spin_unlock(&grace_lock);
 }
